--- firefox-91.7.1/build/moz.configure/init.configure.orig	2022-04-04 16:33:40.528846096 +0200
+++ firefox-91.7.1/build/moz.configure/init.configure	2022-04-04 16:35:05.058388323 +0200
@@ -728,6 +728,8 @@ def split_triplet(triplet, allow_msvc=Fa
         endianness = "little"
     elif cpu in ("x86_64", "ia64"):
         canonical_cpu = cpu
+        if os.endswith('gnux32'):
+            canonical_cpu = 'x32'
         endianness = "little"
     elif cpu in ("s390", "s390x"):
         canonical_cpu = cpu
--- firefox-60.7.0/mfbt/RandomNum.cpp.orig	2019-05-24 22:04:38.196451155 +0200
+++ firefox-60.7.0/mfbt/RandomNum.cpp	2019-05-24 22:10:43.717804289 +0200
@@ -58,7 +58,9 @@
 
 // Older glibc versions don't define SYS_getrandom, so we define it here if
 // it's not available. See bug 995069.
-#  if defined(__x86_64__)
+#  if defined(__x86_64__) && defined(__ILP32__)
+#    define GETRANDOM_NR (__X32_SYSCALL_BIT + 318)
+#  elif defined(__x86_64__)
 #    define GETRANDOM_NR 318
 #  elif defined(__i386__)
 #    define GETRANDOM_NR 355
--- firefox-91.7.1/python/mozbuild/mozbuild/configure/constants.py.orig	2022-04-04 16:33:42.568845879 +0200
+++ firefox-91.7.1/python/mozbuild/mozbuild/configure/constants.py	2022-04-04 16:44:51.148857314 +0200
@@ -60,6 +60,7 @@ CPU_bitness = {
     "sparc64": 64,
     "x86": 32,
     "x86_64": 64,
+    "x32": 32,
     "wasm32": 32,
 }
 
@@ -78,8 +79,9 @@ WindowsBinaryType = EnumString.subclass(
 # The order of those checks matter
 CPU_preprocessor_checks = OrderedDict(
     (
+        ("x32", "__x86_64__ && __ILP32__"),
         ("x86", "__i386__ || _M_IX86"),
-        ("x86_64", "__x86_64__ || _M_X64"),
+        ("x86_64", "(__x86_64__ && __LP64__) || _M_X64"),
         ("arm", "__arm__ || _M_ARM"),
         ("aarch64", "__aarch64__ || _M_ARM64"),
         ("ia64", "__ia64__"),
--- firefox-68.7.0/js/src/vm/BigIntType.cpp~	2020-04-03 21:29:59.000000000 +0200
+++ firefox-68.7.0/js/src/vm/BigIntType.cpp	2020-05-01 11:22:53.296439915 +0200
@@ -263,7 +263,7 @@
 BigInt::Digit BigInt::digitDiv(Digit high, Digit low, Digit divisor,
                                Digit* remainder) {
   MOZ_ASSERT(high < divisor, "division must not overflow");
-#if defined(__x86_64__)
+#if defined(__x86_64__) && !defined(__ILP32__)
   Digit quotient;
   Digit rem;
   __asm__("divq  %[divisor]"
--- firefox-102.5.0/js/src/jit/GenerateAtomicOperations.py.orig	2022-11-07 22:06:45.000000000 +0100
+++ firefox-102.5.0/js/src/jit/GenerateAtomicOperations.py	2023-01-21 21:11:44.361987341 +0100
@@ -18,7 +18,7 @@ def fmt_insn(s):
 
 
 def gen_seqcst(fun_name):
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         return r"""
             INLINE_ATTR void %(fun_name)s() {
                 asm volatile ("mfence\n\t" ::: "memory");
@@ -48,7 +48,7 @@ def gen_load(fun_name, cpp_type, size, b
     # - LIRGenerator::visitLoadUnboxedScalar
     # - CodeGenerator::visitAtomicLoad64 (on 64-bit platforms)
     # - MacroAssembler::wasmLoad
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         insns = ""
         if barrier:
             insns += fmt_insn("mfence")
@@ -139,7 +139,7 @@ def gen_store(fun_name, cpp_type, size,
     # - LIRGenerator::visitStoreUnboxedScalar
     # - CodeGenerator::visitAtomicStore64 (on 64-bit platforms)
     # - MacroAssembler::wasmStore
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         insns = ""
         if barrier:
             insns += fmt_insn("mfence")
@@ -222,7 +222,7 @@ def gen_exchange(fun_name, cpp_type, siz
     # NOTE: the assembly code must match the generated code in:
     # - MacroAssembler::atomicExchange
     # - MacroAssembler::atomicExchange64 (on 64-bit platforms)
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         # Request an input/output register for `val` so that we can simply XCHG it
         # with *addr.
         insns = ""
@@ -368,7 +368,7 @@ def gen_cmpxchg(fun_name, cpp_type, size
             "cpp_type": cpp_type,
             "fun_name": fun_name,
         }
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         # Use a +a constraint to load `oldval` into RAX as input/output register.
         insns = ""
         if size == 8:
@@ -488,7 +488,7 @@ def gen_fetchop(fun_name, cpp_type, size
     # NOTE: the assembly code must match the generated code in:
     # - MacroAssembler::atomicFetchOp
     # - MacroAssembler::atomicFetchOp64 (on 64-bit platforms)
-    if cpu_arch in ("x86", "x86_64"):
+    if cpu_arch in ("x86", "x86_64", "x32"):
         # The `add` operation can be optimized with XADD.
         if op == "add":
             insns = ""
@@ -645,7 +645,7 @@ def gen_copy(fun_name, cpp_type, size, u
         offset = unroll - 1
     insns = ""
     for i in range(unroll):
-        if cpu_arch in ("x86", "x86_64"):
+        if cpu_arch in ("x86", "x86_64", "x32"):
             if size == 1:
                 insns += fmt_insn("movb OFFSET(%[src]), %[scratch]")
                 insns += fmt_insn("movb %[scratch], OFFSET(%[dst])")
@@ -721,7 +721,7 @@ namespace jit {
 
 def generate_atomics_header(c_out):
     contents = ""
-    if cpu_arch in ("x86", "x86_64", "aarch64") or (
+    if cpu_arch in ("x86", "x86_64", "x32", "aarch64") or (
         cpu_arch == "arm" and int(buildconfig.substs["ARM_ARCH"]) >= 7
     ):
         contents += "#define JS_HAVE_GENERATED_ATOMIC_OPS 1"
